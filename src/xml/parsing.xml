<div1 id="parsing" role="appendixa"><head>Parsing MathML</head>
<!-- $Id: parsing.xml,v 1.112 2014-04-16 10:54:12 dcarlis Exp $ -->


<div2 id="parsing_wellformed"><head>Use of MathML as Well-Formed
XML</head>

  <issue role="closed" id="update_schema">
    <head>DTD and W3C XML Schema</head>
    <p>DTD and W3C XML Schema need updating to MathML3</p>
  </issue>

  <issue role="closed" id="relax_schema">
    <head>Relax Schema</head>
    <p>Should we add a (normative?) Relax NG schema.</p>
    <resolution><p>We make it normative</p></resolution>
  </issue>

<p>A MathML document must be a well-formed XML document using elements in the MathML
namespace as defined by this specification, however it is not required that the document
refer to any specific Document Type Definition (DTD) or schema that specifies MathML. It
is sometimes advantageous <emph>not</emph> to specify such a language definition as these
files are large, often much larger than the MathML expression and unless they have been
previously cached by the MathML application, the time taken to fetch the DTD or schema may
have an appreciable effect on the processing of the MathML document.</p>

<p>Note that if no DTD is specified with a DOCTYPE declaration, that entity
references (for example to refer to MathML characters by name) may not be used. The
document should be encoded in an encoding (for example UTF-8) in which all needed
characters may be encoded as character data, or characters may be referenced using numeric
character references, for example &amp;#x222B; rather than &amp;int;</p>

<p>If a MathML fragment is parsed without a DTD, in other words as a well-formed XML
fragment, it is the responsibility of the processing application to treat the white space
characters occurring outside of token elements as not significant.</p>

<p>However, in many circumstances, especially while producing or editing MathML, it is
useful to use a language definition to constrain the editing process or to check the
correctness of generated files. The following section, <specref ref="parsing_usingrnc"/>,
discusses the RelaxNG Schema for Mathml4 <bibref ref="RELAX-NG"/>, which forms a normative
part of the specification. Following that, <specref ref="parsing_usingxsd"/>, and <specref
ref="parsing_usingdtd"/> discuss alternative languages definition using the document type
definitions (DTD) and the W3C XML schema language, <bibref ref="XMLSchemas"/>, both of
which are derived from the normative RelaxNG schema automatically.  One should note that
the schema definitions of the language is currently stricter than the DTD version. That
is, a schema validating processor will declare invalid documents that are declared valid
by a (DTD) validating XML parser. This is partly due to the fact that the XML schema
language may express additional constraints not expressable in the DTD, and partly due to
the fact that for reasons of compatibility with earlier releases, the DTD is intentionally
forgiving in some places and does not enforce constraints that are specified in the text
of this specification.</p>
</div2>

<div2 id="parsing_usingrnc">
  <head>Using the RelaxNG Schema for Mathml4</head>
  <p>MathML documents should be validated using the RelaxNG Schema for MathML, either in
  the XML encoding (<loc
  href="http://www.w3.org/Math/RelaxNG/mathml4/mathml4.rng">http://www.w3.org/Math/RelaxNG/mathml4/mathml4.rng</loc>)
  or in compact notation (<loc
  href="http://www.w3.org/Math/RelaxNG/mathml4/mathml4.rnc">http://www.w3.org/Math/RelaxNG/mathml4/mathml4.rnc</loc>)
  which is also shown below.</p>

  <p>In contrast to DTDs there is no in-document method to associate a RelaxNG schema with
  a document.</p>


  <p>We provide five RelaxNG schema for Mathml4 in five parts:
  <ulist>
    <item><p>The grammar for full MathML</p></item>
    <item><p>The grammar for elements common to Content and Presentation</p></item>
    <item><p>The grammar for Presentation MathML</p></item>
    <item><p>The grammar for Strict Content MathML</p></item>
    <item><p>The grammar for Content Mathml4</p></item>
  </ulist>
</p>

<div3 id="parsing_rnc_full">
  <head>Full MathML</head>
  
  <p>The RelaxNG schema for full MathML builds on the schema describing the various parts
  of the language which are given in the following sections. It can be found at <loc
  href="http://www.w3.org/Math/RelaxNG/mathml4/mathml4.rnc">http://www.w3.org/Math/RelaxNG/mathml4/mathml4.rnc</loc>.</p>
<eg></eg>
</div3>

<div3 id="parsing_rnc_common">
  <head>Elements Common to Presentation and Content MathML</head>
  
<eg></eg>
</div3>


<div3 id="parsing_rnc_pres">
  <head>The Grammar for Presentation MathML</head>
  
<eg></eg>

</div3>

<div3 id="parsing_rnc_strict">
  <head>The Grammar for Strict Content Mathml4</head>
  
  <p>The grammar for Strict Content Mathml4 can be found at <loc
  href="http://www.w3.org/Math/RelaxNG/mathml4/mathml4-strict-content.rnc">http://www.w3.org/Math/RelaxNG/mathml4/mathml4-strict-content.rnc</loc>.</p>
<eg></eg>
</div3>


<div3 id="parsing_rnc_content">
  <head>The Grammar for Content MathML</head>
  
  <p>The grammar for Content Mathml4 builds on the grammar for the Strict Content MathML subset, and can be found at <loc
  href="http://www.w3.org/Math/RelaxNG/mathml4/mathml4-content.rnc">http://www.w3.org/Math/RelaxNG/mathml4/mathml4-content.rnc</loc>.</p>
<eg></eg>

</div3>

<div3 id="parsing_rnc_module">
  <head>MathML as a module in a RelaxNG Schema</head>
  <p>Normally, a MathML expression does not constitute an entire XML document. MathML is
  designed to be used as the mathematics fragment of larger markup languages. In
  particular it is designed to be used as a <emph>module</emph> in documents marked up
  with the XHTML family of markup languages. As RelaxNG directly supports modular
  development, this is usually very easy: an XHTML+MathML schema can be specified as simply as
  <eg><![CDATA[# A RelaxNG Schema for  XHTML+MathML
include "xhtml.rnc"
math = external "mathml4.rnc"
Inline.class |= math
Block.class |= math]]></eg>

assuming that we have access to a modular RelaxNG schema for XHTML that uses
<code>Inline.class</code> and <code>Block.class</code> to collect the the content models
for inline and block-level elements.</p>

<p>Customizing the Mathml4 schema so that we can restrict the content of
<el>annotation-xml</el> elements is similarly simple, for example:

  <eg><![CDATA[# A RelaxNG Schema for MathML with OpenMath3 annotations
omobj = external "openmath3.rnc" 
include "mathml4.rnc" {anotation-xml.model = omobj}]]></eg>
</p>
<p>
    The Mathml4 schema is organized so that subsetting to one of the sublanguages specified here is easy.
    To include strict content Mathml4 in a schema just include
      <eg><![CDATA[include "mathml4-common.rnc"
include "mathml4-strict-content.rnc"]]></eg>
    instead of <code>include mathml4.rnc</code>.
</p>

<p>For details about RelaxNG grammars and modularization see <bibref ref="RELAX-NG"/> or <bibref ref="RelaxNGBook"/>.</p>

</div3>
</div2>

<div2 id="parsing_usingdtd">
<head>Using the MathML DTD</head>


<div3 id="interf_validation"><head>Document Validation Issues</head>

<p>The use of namespace prefixes creates an issue for DTD validation
of documents embedding MathML.  DTD validation requires knowing the
literal (possibly prefixed) element names used in the document.
However, the Namespaces in XML Recommendation <bibref
ref="Namespaces"/> allows the prefix to be changed at arbitrary points
in the document, since namespace prefixes may be declared on any
element.</p>


<p>The MathML DTD uses the strategy outlined in <bibref ref="Modularization"/>
of making every element
name in the DTD be accessed by an entity reference. This means that by
declaring a couple of entities to specify the prefix before the DTD is
loaded, the prefix can be chosen by a document author, and compound
DTDs that include several modules can, without changing the module
DTDs, specify unique prefixes for each module to avoid clashes.</p>

</div3>

<div3>
<head>Attribute values in the MathML DTD</head>


<p>Note that the DTD is far more permissive than the Relax NG schema, many constraints on attribute values may not be enforced using DTD syntax.
For example, many attributes expect numerical values or specific micro-syntax, but are declared as CDATA (arbitrary string) in the DTD.
However, lack of enforcement of a requirement in the DTD
does <emph>not</emph> imply that the requirement is not part of the MathML
language itself, or that it will not be enforced by a particular MathML
renderer. (See <specref ref="interf_error"/> for a description of how
MathML renderers should respond to MathML errors.)</p>

<p>Furthermore, the MathML DTD is provided for convenience; although it is
intended to be fully compatible with the text of the specification, the
text should be taken as definitive if there is a contradiction.  (Any
contradictions which may exist between various chapters of the text should
be resolved by favoring <specref ref="chars"/> first, then <specref
ref="presm"/>, <specref ref="contm"/>, then <specref ref="fund_syntax"/>,
and then other parts of the text.)</p>

</div3>



<div3 id="parsing_doctype"><head>DOCTYPE declaration for MathML</head>
<p>MathML documents should be validated using the XML DTD for
MathML,
<loc
href="http://www.w3.org/Math/DTD/mathml4/mathml4.dtd">http://www.w3.org/Math/DTD/mathml4/mathml4.dtd</loc>.
</p> 

<p>Documents using this DTD should contain a DOCTYPE declaration
of the form:
<eg><![CDATA[<!DOCTYPE math 
    PUBLIC "-//W3C//DTD MathML 3.0//EN"
           "http://www.w3.org/Math/DTD/mathml4/mathml4.dtd">]]></eg>
The URI may be changed to that of a local copy
of the DTD if required.</p>
</div3>

</div2>

<div2 id="parsing_usingxsd">
<head>Using the MathML XML Schema</head>


<p>MathML fragments can be validated using the XML Schema for MathML,
located at <loc
href="http://www.w3.org/Math/XMLSchema/mathml4/mathml4.xsd">http://www.w3.org/Math/XMLSchema/mathml4/mathml4.xsd</loc>. The
provided schema  has been mechanically generated from the Relax NG schema, it omits some constraints that can not be enforced using XSD syntax.</p>


<div3 id="parsing_schemalocation">
<head>Associating the MathML schema with MathML fragments</head>

<p>Similarly to the DOCTYPE declaration used in documents, it is possible to link a MathML fragment to the XML Schema, as shown below.</p>

<eg role="mathml-fragment"><![CDATA[<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.w3.org/1998/Math/MathML
            http://www.w3.org/Math/XMLSchema/mathml4/mathml4.xsd">
...
</mml:math>]]></eg>

<p>The <att>xsi:schemaLocation</att> attribute belongs to the XML Schema
instance namespace, defined in <bibref ref="XMLSchemas"/>.  The value
of the attribute is a pair of URIs: the first is the MathML namespace
URI and the second is the location of the schema for that
namespace. The second URI may be changed to that of a local copy if
required.</p>

<p>As the XML Schema specification indicates, the use of the
<att>schemaLocation</att> attribute is only a hint for schema
processors: validation by a MathML-aware processor can be performed
without requiring that the <att>schemaLocation</att> attribute be
declared in the instance. Moreover, a processor can even ignore or
override the specified schema URI, if it is directed to.</p>
</div3>

<!--
<div3 id="parsing-charents"><head>Character entity references</head>

<issue role="closed" id="specifying_entities">
  <head>Do we want to talk about entities here</head>
  <p>After all their use is deprecated</p>
</issue>

<p>Although validating a MathML fragment with the XML Schema provided
performs more checks regarding the structure of the fragment than the
DTD, DTD processing is still necessary if the MathML markup contains
entity references for characters and symbols, as XML Schema does not
provide a mechanism for expanding named entities.  Therefore the
MathML DOCTYPE declaration must still be present if one wishes to use
entities for mathematical symbols, such as
<code>&amp;DifferentialD;</code>. An example of a MathML document
linking to both the MathML DTD and the XML Schema is shown below.</p>

<eg role="mathml-fragment"><![CDATA[<!DOCTYPE mml:math 
    PUBLIC "-//W3C//DTD MathML 2.0//EN"
           "http://www.w3.org/Math/DTD/mathml4/mathml4.dtd" [
    <!ENTITY % MATHML.prefixed "INCLUDE">
    <!ENTITY % MATHML.prefix "mml">
]>

<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.w3.org/1998/Math/MathML
            http://www.w3.org/Math/XMLSchema/mathml4/mathml4.xsd">
...
    <mml:mo> &DifferentialD; </mml:mo>
...
</mml:math>]]></eg>

<p>The use of character references to represent characters and
symbols, such as <code>&amp;#x2146;</code> (which is equivalent
<code>to &amp;DifferentialD;</code>) does not necessitate the use of a
DOCTYPE declaration.</p>

</div3>
-->
</div2>

<div2 id="parsing_mml_xhtml">
<head>Parsing MathML in XHTML</head>
<p>As noted in <specref ref="interf_xhtml"/> The schema used for
XHTML+MathML documents extends the content model of <el>mtext</el> to
allow inline (phrasing) html elements. The extension used by the W3C
validator uses the RelaxNG schema, however DTD and XSD versions of the
grammar may be similarly extended.</p>
</div2>

<div2  id="parsing_mml_html">
<head>Parsing MathML in HTML</head>
<p>See <specref
ref="interf_html"/> for more details of the parsing of MathML in HTML.</p>
</div2>
</div1>


<!-- LocalWords:  DTD NG DOCTYPE UTF DTDs inline xml CDATA xsi schemaLocation
-->
